Index: Pywork/solution.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from structure import Station, Train, csv\n\n\n# Function to write the CSV information for the given schedule\ndef write_csv(trains: list) -> None:\n\n    with open(\"output.csv\", \"w\") as output:\n        writer = csv.writer(output, delimiter=\",\")\n        \n        writer.writerow([\n            \"TrainNum\",\n            \"TrainType\",\n            \"A_ArrivalTime\",\n            \"A_AvailCap\",\n            \"A_Boarding\",\n            \"B_ArrivalTime\",\n            \"B_AvailCap\",\n            \"B_Boarding\",\n            \"C_ArrivalTime\",\n            \"C_AvailCap\",\n            \"C_Boarding\",\n            \"U_Arrival\",\n            \"U_AvailCap\",\n            \"U_Offloading\"\n        ])\n\n        for i, train in enumerate(trains):\n            writer.writerow([i + 1] + train.details)\n\n\n# Everything after this is testing, here we need to find a way to optimize 'schedule'\n\n# Our schedule has the format where the first number represents the train capacity (4 x 200; 12 x 400)\n# and the second represents the departure time (minutes after 7AM)\n\n# This schedule currently reflects the one provided in the Google Drive file from RailVision\n\nschedule = [\n    (200, 0),\n    (400, 10),\n    (400, 15),\n    (400, 20),\n    (400, 30),\n    (400, 40),\n    (400, 50),\n    (400, 60),\n    (400, 70),\n    (400, 80),\n    (400, 90),\n    (400, 105),\n    (400, 130),\n    (200, 150),\n    (200, 160),\n    (200, 180),\n]\n\ntrains = [Train(c, t) for c, t in schedule]\nav = Train.run_schedule(trains)\n\n\"\"\"\n# The following is a brute force way to find the best permutation of trains, given that they depart\n# 11 mins apart (except the last, departing at 10 AM)\n\nimport itertools\n\nL4_indexes = itertools.combinations(range(16), r=4)\nperms = [[200 if i in comb else 400 for i in range(16)] for comb in L4_indexes]\n\n\n# Assume the first permutation is the best\nbest = [Train(c, 180 if i == 15 else i * 11) for i, c in enumerate(perms[0])]\nmin_wait = Train.run_schedule(best)\n\n\nfor i, perm in enumerate(perms):\n\n    Train.total_passengers_collected = 0\n    Train.total_waiting_time = 0\n    Train.stations = Station.initialise_stations()\n\n    trains = [Train(c, 180 if i == 15 else i * 11) for i, c in enumerate(perm)]\n\n    av = Train.run_schedule(trains)\n\n    if av < min_wait:\n        min_wait = av\n        best = trains\n\"\"\"\n \n\n\n\n# Writing the CSV of the schedule\nwrite_csv(trains)\n\n# For checking\nprint(av)\nprint(Train.total_passengers_collected)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pywork/solution.py b/Pywork/solution.py
--- a/Pywork/solution.py	(revision e0e7a7086a7e8fd1b77366acafc7f18833f86642)
+++ b/Pywork/solution.py	(date 1642874811676)
@@ -3,10 +3,9 @@
 
 # Function to write the CSV information for the given schedule
 def write_csv(trains: list) -> None:
-
     with open("output.csv", "w") as output:
         writer = csv.writer(output, delimiter=",")
-        
+
         writer.writerow([
             "TrainNum",
             "TrainType",
@@ -86,10 +85,8 @@
         min_wait = av
         best = trains
 """
- 
 
 
-
 # Writing the CSV of the schedule
 write_csv(trains)
 
Index: Pywork/structure.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv, datetime\n\nclass Station:\n\n    def __init__(self, passengers: list, time_to_next: int) -> None:\n        # A list of integer represents the number of people remaining from each time interval\n        self.passengers = passengers\n\n        # Minutes to reach next station after arrival (3 min dwell + travel time)\n        self.time_to_next = time_to_next\n    \n    @classmethod\n    def initialise_stations(cls):\n        # Initial work to read input data\n        a = []\n        b = []\n        c = []\n\n        with open(\"./input.csv\", \"r\") as csv_file:\n            csv_reader = csv.reader(csv_file, delimiter=\",\")\n\n            for i, row in enumerate(csv_reader):\n                if not i:\n                    continue\n\n                [a, b, c][[\"A\", \"B\", \"C\"].index(row[0])].append(int(row[1]))\n        \n        return [cls(l, t) for l, t in [(a, 11), (b, 12), (c, 14)]]\n\nclass Train: \n\n    stations =  Station.initialise_stations() # A list of stations\n    total_waiting_time = 0  # The total time spent waiting for all passengers\n    total_passengers_collected = 0  # The total amount of people that took the train\n\n    \n    def __init__(self, capacity: int, current_time: int) -> None:\n        self.capacity = capacity  # The capacity of the train\n        self.remaining = capacity  # Seats remaining on the train\n        self.current_time = current_time  # The current time, represented as minutes after 7 AM\n        self.details = [\"L4\" if capacity == 200 else \"L8\"]  # CSV details for the train\n\n    \n    # Runs a train based on its scheduled start time and capacity\n    def run_train(self) -> None:\n        \n        # Iterating through the stations\n        for station in Train.stations:\n\n            # Appending station's arrival time\n            self.details.append((datetime.datetime(2000, 1, 1, 7, 0) \n            + datetime.timedelta(minutes=self.current_time)).strftime(\"%-I:%M\"))\n\n            # Appending available capacity\n            self.details.append(self.remaining)\n\n            # Number of passengers taken at this station\n            passengers_taken = 0\n\n            # Iterating in terms of first come first serve\n            for i in range(len(station.passengers)):\n\n                # Passengers arrive in 10 minutes intervals after 7 AM\n                # Break if the arrival time is in the future or if there's no space\n                if i * 10 > self.current_time or self.remaining == 0:\n                    break\n                \n                # If there's no people, check the next time interval\n                if not station.passengers[i]:\n                    continue\n\n                # If not enough capacity, take as many as you can and break\n                if self.remaining - station.passengers[i] < 0:\n                    \n                    # Taking as many as we can\n                    station.passengers[i] -= self.remaining\n\n                    # Adjusting waiting time and passengers collected\n                    Train.total_waiting_time += self.remaining * (self.current_time - (i * 10))\n                    passengers_taken += self.remaining\n\n                    # No more space left\n                    self.remaining = 0\n                    break\n                else:\n\n                    # Taking all people since we have space\n                    self.remaining -= station.passengers[i]\n                    \n                    # Adjusting waiting time and passengers collected\n                    Train.total_waiting_time += station.passengers[i] * (self.current_time - (i * 10))\n                    passengers_taken += station.passengers[i]\n                    \n                    # No more people left for this arrival time\n                    station.passengers[i] = 0\n            \n\n            self.details.append(passengers_taken)  # Appending passengers taken at this station\n            Train.total_passengers_collected += passengers_taken  # Adding passengers taken at this station\n            self.current_time += station.time_to_next  # Updating the time (for the next station)\n\n        # Appending Union Station's arrival time, available capacity, and offloaded amount\n        self.details.append((datetime.datetime(2000, 1, 1, 7, 0) \n            + datetime.timedelta(minutes=self.current_time)).strftime(\"%-I:%M\"))\n        self.details.append(self.remaining)\n        self.details.append(self.capacity - self.remaining)\n    \n\n    # Runs the trains according to schedule, returning the average wait time\n    @staticmethod\n    def run_schedule(trains: list) -> float:\n        for train in trains:\n            train.run_train()\n\n        return Train.total_waiting_time / Train.total_passengers_collected\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pywork/structure.py b/Pywork/structure.py
--- a/Pywork/structure.py	(revision e0e7a7086a7e8fd1b77366acafc7f18833f86642)
+++ b/Pywork/structure.py	(date 1642886667245)
@@ -1,4 +1,6 @@
-import csv, datetime
+import csv
+import datetime
+
 
 class Station:
 
@@ -8,7 +10,7 @@
 
         # Minutes to reach next station after arrival (3 min dwell + travel time)
         self.time_to_next = time_to_next
-    
+
     @classmethod
     def initialise_stations(cls):
         # Initial work to read input data
@@ -24,32 +26,30 @@
                     continue
 
                 [a, b, c][["A", "B", "C"].index(row[0])].append(int(row[1]))
-        
+
         return [cls(l, t) for l, t in [(a, 11), (b, 12), (c, 14)]]
 
-class Train: 
-
-    stations =  Station.initialise_stations() # A list of stations
+
+class Train:
+    stations = Station.initialise_stations()  # A list of stations
     total_waiting_time = 0  # The total time spent waiting for all passengers
     total_passengers_collected = 0  # The total amount of people that took the train
 
-    
     def __init__(self, capacity: int, current_time: int) -> None:
         self.capacity = capacity  # The capacity of the train
         self.remaining = capacity  # Seats remaining on the train
         self.current_time = current_time  # The current time, represented as minutes after 7 AM
         self.details = ["L4" if capacity == 200 else "L8"]  # CSV details for the train
 
-    
     # Runs a train based on its scheduled start time and capacity
     def run_train(self) -> None:
-        
+
         # Iterating through the stations
         for station in Train.stations:
 
             # Appending station's arrival time
-            self.details.append((datetime.datetime(2000, 1, 1, 7, 0) 
-            + datetime.timedelta(minutes=self.current_time)).strftime("%-I:%M"))
+            self.details.append((datetime.datetime(2000, 1, 1, 7, 0)
+                                 + datetime.timedelta(minutes=self.current_time)).strftime("%-I:%M"))
 
             # Appending available capacity
             self.details.append(self.remaining)
@@ -64,14 +64,14 @@
                 # Break if the arrival time is in the future or if there's no space
                 if i * 10 > self.current_time or self.remaining == 0:
                     break
-                
+
                 # If there's no people, check the next time interval
                 if not station.passengers[i]:
                     continue
 
                 # If not enough capacity, take as many as you can and break
                 if self.remaining - station.passengers[i] < 0:
-                    
+
                     # Taking as many as we can
                     station.passengers[i] -= self.remaining
 
@@ -86,25 +86,23 @@
 
                     # Taking all people since we have space
                     self.remaining -= station.passengers[i]
-                    
+
                     # Adjusting waiting time and passengers collected
                     Train.total_waiting_time += station.passengers[i] * (self.current_time - (i * 10))
                     passengers_taken += station.passengers[i]
-                    
+
                     # No more people left for this arrival time
                     station.passengers[i] = 0
-            
 
             self.details.append(passengers_taken)  # Appending passengers taken at this station
             Train.total_passengers_collected += passengers_taken  # Adding passengers taken at this station
             self.current_time += station.time_to_next  # Updating the time (for the next station)
 
         # Appending Union Station's arrival time, available capacity, and offloaded amount
-        self.details.append((datetime.datetime(2000, 1, 1, 7, 0) 
-            + datetime.timedelta(minutes=self.current_time)).strftime("%-I:%M"))
+        self.details.append((datetime.datetime(2000, 1, 1, 7, 0)
+                             + datetime.timedelta(minutes=self.current_time)).strftime("%-I:%M"))
         self.details.append(self.remaining)
         self.details.append(self.capacity - self.remaining)
-    
 
     # Runs the trains according to schedule, returning the average wait time
     @staticmethod
@@ -114,5 +112,19 @@
 
         return Train.total_waiting_time / Train.total_passengers_collected
 
+    def encounter(self):
+        # mirror the run train function but only on self - calculates the number of encounter
+        passengers_encountered: int = 0
+        for station in Train.stations:
+            if self.current_time // 10 == 0:
+                passengers_encountered += station.passengers[0]
 
+            elif self.current_time > 180:
+                self.current_time = 180
+            else:
+                for i in range((self.current_time // 10) - 1, (self.current_time // 10) + 1):
+                    passengers_encountered += station.passengers[i]
 
+            self.current_time += station.time_to_next
+
+        return passengers_encountered
Index: Pywork/input.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Station,Passengers\nA,25\nA,50\nA,75\nA,100\nA,125\nA,150\nA,125\nA,100\nA,75\nA,50\nA,45\nA,40\nA,35\nA,30\nA,25\nA,20\nA,15\nA,10\nA,5\nB,50\nB,75\nB,100\nB,125\nB,150\nB,175\nB,150\nB,125\nB,100\nB,100\nB,75\nB,75\nB,50\nB,45\nB,35\nB,25\nB,20\nB,15\nB,10\nC,50\nC,100\nC,150\nC,200\nC,250\nC,200\nC,175\nC,150\nC,150\nC,125\nC,100\nC,75\nC,50\nC,50\nC,45\nC,40\nC,35\nC,30\nC,25
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pywork/input.csv b/Pywork/input.csv
--- a/Pywork/input.csv	(revision e0e7a7086a7e8fd1b77366acafc7f18833f86642)
+++ b/Pywork/input.csv	(date 1642865863232)
@@ -1,4 +1,4 @@
-Station,Passengers
+Station,#Passengers
 A,25
 A,50
 A,75
Index: Pywork/FirstLayer.py
===================================================================
diff --git a/Pywork/FirstLayer.py b/Pywork/FirstLayer.py
deleted file mode 100644
--- a/Pywork/FirstLayer.py	(revision e0e7a7086a7e8fd1b77366acafc7f18833f86642)
+++ /dev/null	(revision e0e7a7086a7e8fd1b77366acafc7f18833f86642)
@@ -1,1 +0,0 @@
-#
\ No newline at end of file
Index: Pywork/MentorS.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pywork/MentorS.py b/Pywork/MentorS.py
new file mode 100644
--- /dev/null	(date 1642886314154)
+++ b/Pywork/MentorS.py	(date 1642886314154)
@@ -0,0 +1,24 @@
+import pandas as pd
+import numpy as np
+import datetime as dt
+import csv
+from structure import Train
+
+# loop to check the best time for a train to leave to pick up as many ppl as possible
+capacity_l8 = 400
+available_times = [minute for minute in range(0, 178)]  # this is in minutes
+current_time = 0
+max_encounter = 0
+best_time = 0
+
+for time in available_times:
+    # create the obj for each loop
+    train = Train(400, time)
+    ppl_encountered = train.encounter()
+
+    if ppl_encountered > max_encounter:
+        max_encounter = ppl_encountered
+        best_time = time
+
+if __name__ == '__main__':
+    print(best_time)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"PropertiesComponent\">\n    <property name=\"settings.editor.selected.configurable\" value=\"editor.preferences.fonts.default\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e0e7a7086a7e8fd1b77366acafc7f18833f86642)
+++ b/.idea/workspace.xml	(date 1642886667678)
@@ -1,6 +1,131 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="ac1b28e2-70ee-4ee4-b8f6-005706a18df6" name="Changes" comment="Changed the directories and created a directory for the java project.">
+      <change afterPath="$PROJECT_DIR$/Pywork/MentorS.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pywork/csvWork.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Pywork/FirstLayer.py" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Pywork/input.csv" beforeDir="false" afterPath="$PROJECT_DIR$/Pywork/input.csv" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Pywork/solution.py" beforeDir="false" afterPath="$PROJECT_DIR$/Pywork/solution.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Pywork/structure.py" beforeDir="false" afterPath="$PROJECT_DIR$/Pywork/structure.py" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Jupyter Notebook" />
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitSEFilterConfiguration">
+    <file-type-list>
+      <filtered-out-file-type name="LOCAL_BRANCH" />
+      <filtered-out-file-type name="REMOTE_BRANCH" />
+      <filtered-out-file-type name="TAG" />
+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
+    </file-type-list>
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="243UbuJZj54GhE02gWxHjKDTxYR" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
   <component name="PropertiesComponent">
+    <property name="ASKED_SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
+    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+    <property name="WebServerToolWindowFactoryState" value="false" />
     <property name="settings.editor.selected.configurable" value="editor.preferences.fonts.default" />
   </component>
+  <component name="RunManager">
+    <configuration name="MentorS" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="HACK22" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Pywork" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Pywork/MentorS.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.MentorS" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="ac1b28e2-70ee-4ee4-b8f6-005706a18df6" name="Changes" comment="" />
+      <created>1642858838604</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1642858838604</updated>
+      <workItem from="1642858841962" duration="17494000" />
+    </task>
+    <task id="LOCAL-00001" summary="Changed the directories and created a directory for the java project.">
+      <created>1642858910456</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1642858910456</updated>
+    </task>
+    <task id="LOCAL-00002" summary="Changed the directories and created a directory for the java project.">
+      <created>1642859030057</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1642859030057</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Changed the directories and created a directory for the java project." />
+    <option name="LAST_COMMIT_MESSAGE" value="Changed the directories and created a directory for the java project." />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/HACK22$MentorS.coverage" NAME="MentorS Coverage Results" MODIFIED="1642886434513" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/Pywork" />
+  </component>
 </project>
\ No newline at end of file
